{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/index.js",
    "src/states/Boot.js",
    "src/states/DynamicLoad.js",
    "src/states/GameState.js",
    "src/states/Preload.js",
    "src/states/PreloadAssets.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import Boot from 'states/Boot';\nimport Preload from 'states/Preload';\nimport DynamicLoad from 'states/DynamicLoad';\nimport PreloadAssets from 'states/PreloadAssets';\nimport GameState from 'states/GameState';\n\nclass Game extends Phaser.Game {\n\n\tconstructor() {\n\t\twindow.PhaserGlobal = { disableAudio: true };\n\t\t// Phaser.WEBGL_MULTI\n\t\tsuper(1024, 720, Phaser.WEBGL_MULTI, 'window', null);\n\n\t\tthis.state.add('Boot', Boot, false);\n\t\tthis.state.add('Preload', Preload, false);\n\t\tthis.state.add('DynamicLoad', DynamicLoad, false);\n\t\tthis.state.add('PreloadAssets', PreloadAssets, false);\n\n\t\tthis.state.add('GameState', GameState, false);\n\n\t\tthis.state.start('Boot');\n\t}\n}\n\nnew Game();\n",
    "class Boot extends Phaser.State {\n\n\tpreload() {\n\t\tthis.load.image('preloadBar', 'assets/loader.png');\n\t\tthis.load.image('preloadBg', 'assets/loaderBg.png');\n\n\t\tthis.load.json(\"assets\", \"assets/template.json\"); //TODO ADD VERSIONS?\n\n\t\tthis.load.script('assetLoader', 'assets/phaser-asset-loader-0.0.1.min.js');\n\n\n\t}\n\tcreate() {\n\t\t//this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;\n\t\tthis.game.stage.backgroundColor = '#14171a';\n\n\t\tthis.game.state.start(\"Preload\");\n\t}\n}\n\nexport default Boot;\n",
    "class DynamicLoad extends Phaser.State {\n\n  create() {\n    this.worldSize = {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n    this.toLoadJson = {\n      \"image\": {}\n    };\n    this.loadingDelta = 0;\n    this.game.hd = false;\n  }\n\n  loadWorld(json) {\n\n    //SETUP LOADING\n  //  console.log('File In DynamicLoad');\n\n    let rawSizes = null;\n    //FETCH META DATA\n    //IF MANY MAPS\n    if (json.savegame.game.maps.li.length) {\n      json.savegame.game.maps.li = json.savegame.game.maps.li[0];\n    }\n\n    //console.log(json.savegame.game.maps.li);\n\n    rawSizes = json.savegame.game.maps.li.mapInfo.size;\n    //TODO CHECK VERSION AND SWAP OUT allAssets\n\n    let sizes = this.getPosition(rawSizes);\n    this.worldSize.x = sizes[0];\n    this.worldSize.y = sizes[2];\n    this.worldSize.z = sizes[1];\n\n    const toLoadAssets = this.getUniqueStuff(json.savegame.game.maps.li.things.thing);\n\n    let allAssets = this.game.cache.getJSON(\"assets\");\n    let regex = new RegExp('\\_(.*)');\n    let preRegex = new RegExp('(.*)\\_');\n\n    for (let i = 0; i < toLoadAssets.length; i++) {\n\n      //  toLoadJson.push(allAssets.image[toLoadAssets[i]])\n      let filterName = null;\n\n      if (regex.exec(toLoadAssets[i])) {\n\n        if(preRegex.exec(toLoadAssets[i])[1] == \"Shell\" ||\n        preRegex.exec(toLoadAssets[i])[1] == \"TrapIED\"){\n          filterName = toLoadAssets[i];\n        }else if( preRegex.exec(toLoadAssets[i])[1] == \"Plant\"){ //VERSION 0.19\n          filterName =  preRegex.exec(toLoadAssets[i])[1] + regex.exec(toLoadAssets[i])[1];\n        }else{\n          filterName =  regex.exec(toLoadAssets[i])[1];\n        }\n      } else {\n        filterName = toLoadAssets[i];\n      }\n\n      //Loop through all the unique assets sound\n      if (allAssets.image[filterName] !== undefined) {\n        var assetString = '{\"' + filterName + '\": \"' + allAssets.image[filterName] + '\"}';\n\n        // console.log(assetString);\n        this.toLoadJson.image[filterName] = allAssets.image[filterName] //JSON.parse(assetString);\n\n        //console.log(filterName + \" \" + allAssets.image[filterName]);\n      }\n\n    }\n\n\n    //console.log(this.toLoadJson.image);\n    //new AssetLoader(this.game, this.game.cache.getJSON(\"toLoadJson\"));\n    this.startMap(json);\n  }\n\n  getUniqueStuff(allStuff) {\n    return [...new Set(allStuff.map(stuff => stuff.def))];\n  }\n\n  getPosition(raw) {\n    //Remove the () + comma seperate the x y z\n    let formattedSize = raw.replace(/[(-)]/g, '');\n    //Split out into an array\n    formattedSize = formattedSize.split(\",\");\n    //Loop through the array to make it all ints\n    for (let i = 0; i < formattedSize.length; i++) {\n      formattedSize[i] = parseInt(formattedSize[i]);\n    }\n    return formattedSize;\n  }\n\n  showHD(){\n    this.game.hd = true;\n  }\n  hideHD(){\n    this.game.hd = false;\n  }\n  startMap(json) {\n    this.game.state.start('PreloadAssets', true, false, this.toLoadJson, json);\n\n  }\n\n}\nexport default DynamicLoad;\n",
    "//import * as GameUI from 'objects/GameUI';\n\nclass GameState extends Phaser.State {\n\n\n  create() {\n\n    this.json = this.game.json;\n\n    this.fastRender = true;\n\n    this.center = {\n      x: this.game.world.centerX,\n      y: this.game.world.centerY\n    }\n\n    this.SCREENWIDTH = this.game.width;\n    this.SCREENHEIGHT = this.game.height;\n\n    this.MOUSEBOUNDS = 25;\n\n    this.worldSize = {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n\n    this.GRANITE = 0x635e5b;\n    this.LIMESTONE = 0x5f5c44;\n    this.SANDSTONE = 0x756157;\n    this.MARBLE = 0x777877;\n    this.SLATE = 0x3a3a39;\n    this.SAND = 0x998864;\n\n    this.WOOD = 0xBF6C2A;\n    this.STEEL = 0xb7b7b7;\n    this.PLASTEEL = 0x7bafae;\n    this.COMPONENTS = 0x392C18;\n    this.GOLD = 0xD0B703;\n    this.SILVER = 0xAEA290;\n    this.URANIUM = 0x768451;\n    this.JADE = 0x438347;\n\n    this.ALPACA = 0xedd8ae;\n    this.ALPHABEAVER = 0x735348;\n    this.FOXARCTIC = 0xc8c8c8;\n    this.WOLFARCTIC = 0xc8c8c8;\n    this.BOOMALOPE = 0xb0966a;\n    this.BOOMRAT = 0x73251c;\n    this.CAPYBARA = 0xb97d4f;\n    this.CARIBOU = 0xad634d;\n    this.CASSOWARY = 0x505050;\n    this.CAT = 0xbdab9f;\n    this.CHICKEN = 0xc89655;\n    this.CAMEL = 0xb7a23a;\n    this.CHINCHILLA = 0xb2aa9e;\n    this.COBRA = 0x716257;\n    this.COUGAR = 0xb18870;\n    this.COW = 0xc9c9c9;\n    this.DEER = 0xa26a39;\n    this.DROMEDARY = 0xccb496;\n    this.ELEPHANT = 0x827e77;\n    this.ELK = 0xa26a39;\n    this.EMU = 0x7a6d63;\n    this.FOXFENNEC = 0xc5a167;\n    this.GAZELLE = 0xd6863b;\n    this.GRIZZLYBEAR = 0x705241;\n    this.HARE = 0x83806c;\n    this.HUMAN = 0xd3c28f;\n    this.HUSKY = 0x898585;\n    this.IBEX = 0x998171;\n    this.IGUANA = 0x65743a;\n    this.LABRADORRETRIEVER = 0xdcc6a0;\n    this.LYNX = 0xad9b8a;\n    this.MEGASCARAB = 0x726b54;\n    this.MEGASLOTH = 0xbda174;\n    this.MEGASPIDER = 0x9a7d5e;\n    this.MONKEY = 0x7c351d;\n    this.MUFFALO = 0x98aaae;\n    this.OSTRICH = 0x4c5363;\n    this.PANTHER = 0x3c3c3c;\n    this.PIG = 0xae967e;\n    this.POLARBEAR = 0xb4b4b4;\n    this.RACCOON = 0xaeacae;\n    this.RAT = 0x6e5f52;\n    this.FOXRED = 0xb26422;\n    this.RHINOCEROS = 0x969696;\n    this.SNOWHARE = 0xb4b4b4;\n    this.SPELOPEDE = 0x9c947d;\n    this.SQUIRREL = 0x8c5524;\n    this.THRUMBO = 0xe9e9e9;\n    this.WOLFTIMBER = 0x736e64;\n    this.TORTOISE = 0x474f31;\n    this.TURKEY = 0x505050;\n    this.WARG = 0x7b6859;\n    this.WILDBOAR = 0xae967e;\n    this.YORKSHIRETERRIER = 0xd1a827;\n\n    this.MEAT = 0xB03030;\n\n    this.DEVILSTRAND = 0x8c1d10;\n    this.CLOTH = 0xc3c0b0;\n\n    if (this.game.hd == false) {\n      this.TILESIZE = 16; //orginal 64, cut in half to save memory.\n      this.SCALESIZE = 0.25;\n\n      this.zoomLevel = 1;\n      this.zoomRate = 0.5;\n      this.minZoom = 0.5;\n      this.maxZoom = 4;\n    } else {\n      this.TILESIZE = 32; //orginal 64, cut in half to save memory.\n      this.SCALESIZE = 0.5;\n      this.zoomLevel = 1;\n      this.zoomRate = 0.5;\n      this.minZoom = 1;\n      this.maxZoom = 4;\n    }\n\n    this.mapInfo = { //RAW MAP DATA (arrays)\n      \"height\": 0,\n      \"width\": 0,\n      \"name\": null,\n      \"topTerrainGrid\": [],\n      \"underTerrainGrid\": [],\n      \"resourceGrid\": [],\n      \"resourceRefGrid\": [],\n      \"deepResourceGrid\": [],\n      \"deepResourceCount\": [],\n      \"roofGrid\": [],\n      \"stuffGrid\": [],\n      \"stuffRefGrid\": []\n\n    };\n\n    this.cursors =\n      this.currentTile =\n      this.topTerrainGridLayer = //TILEMAPS/BITMAP IMAGES\n      this.underTerrainGridLayer =\n      this.resourceGridLayer =\n      this.deepResourceGridLayer =\n      this.rocksGridLayer =\n      this.rocksLayer =\n      this.mountainsLayer =\n\n      this.stuffLayer =\n      this.resourceLayer =\n      this.deepResourceLayer =\n      this.bottomLayer =\n      this.roofGridLayer =\n      this.currentBounds =\n      this.centerMarker =\n      this.marker = null;\n\n    this.rockGrid = [];\n    this.game.forceSingleUpdate = false;\n    this.game.stage.backgroundColor = '#14171a';\n\n    this.game.multiTexture = true;\n\n    this.loading = false;\n    this.loadingFinished = false;\n    this.LOADDELAY = 10; //A small tick to allow the UI to update the loading state\n    this.loadingDeltaWait = this.LOADDELAY;\n    this.loadingDelta = 0;\n\n    this.clickDepth = 0;\n    this.clickIndex = 0;\n    this.oldStuffTile = null;\n\n  }\n\n  update() {\n\n    if (this.loadingDelta == 0) {\n      this.buildMapInfo(this.json);\n    }\n    if (this.loadingDelta > 0 && this.loadingDeltaWait > 0 && this.loadingFinished == false) {\n      if (this.loadingSprite) {\n        this.loadingSprite.scale.setTo(0.5 * this.loadingDelta);\n      }\n      this.loadingDeltaWait--;\n    } else {\n      //this.loadingDeltaWait = this.LOADDELAY;\n      this.loading = true;\n    }\n\n    if (this.loading && this.loadingFinished == false) {\n\n\n      if (this.loadingDelta == 1) {\n\n        console.log(this.loadingDelta);\n\n        this.rocksGridLayer = this.game.add.group();\n        this.mountainsLayer = this.game.add.group();\n        this.stuffGridLayer = this.game.add.group();\n        this.resourceGridLayer = this.game.add.group();\n        this.deepResourceGridLayer = this.game.add.group();\n\n        this.bottomLayer = this.game.add.group();\n\n        for (var i = 0; i < this.worldSize.x; i++) {\n          if (!this.rockGrid[i]) {\n            this.rockGrid[i] = [];\n          }\n          for (var j = 0; j < this.worldSize.y; j++) {\n            this.rockGrid[i][j] = 0;\n          }\n        }\n\n        //RENDER TILEMAP\n\n        this.renderTerrainTileMap();\n\n        this.renderStuff();\n\n        this.renderWalls();\n\n        this.renderMountain();\n\n        this.markerInit();\n\n        /*  this.centerMarker = this.game.add.graphics();\n        this.centerMarker.lineStyle(2, 0x00FFFF, 1);\n        this.centerMarker.drawRect(0, 0, this.TILESIZE, this.TILESIZE);\n*/\n        //this.cameraZones();\n\n        this.loadingDelta = 2;\n        this.loadingDeltaWait = this.LOADDELAY;\n        this.loading = false;\n        //this.game.world.bringToTop(this.front_layer);\n\n      } else if (this.loadingDelta == 2) {\n        console.log(this.loadingDelta);\n\n        this.stuffLayer = this.renderBitmap(this.stuffGridLayer);\n\n        this.loadingDelta = 3;\n        this.loadingDeltaWait = this.LOADDELAY;\n        this.loading = false;\n\n      } else if (this.loadingDelta == 3) {\n        console.log(this.loadingDelta);\n\n        this.rocksGridLayer.add(this.mountainsLayer);\n\n        this.rocksLayer = this.renderBitmap(this.rocksGridLayer);\n\n        //  this.resourceLayer.alpha = 0;\n\n        this.mountainsLayer.destroy();\n        this.loadingDelta = 4;\n        this.loadingDeltaWait = this.LOADDELAY;\n        this.loading = false;\n\n      } else if (this.loadingDelta == 4) {\n        console.log(this.loadingDelta);\n\n        this.game.world.setBounds(0, 0, this.mapInfo.width, this.mapInfo.height);\n\n        this.game.camera.x = this.mapInfo.width / 2;\n        this.game.camera.y = this.mapInfo.height / 2;\n\n        this.cursors = this.game.input.keyboard.createCursorKeys();\n        this.plusKey = this.game.input.keyboard.addKey(Phaser.Keyboard.EQUALS).onDown.add(function() {\n          if ((this.zoomLevel - this.zoomRate) >= this.minZoom) {\n            this.zoomMap(this.zoomLevel - this.zoomRate);\n          }\n        }, this);\n        this.minusKey = this.game.input.keyboard.addKey(Phaser.Keyboard.UNDERSCORE).onDown.add(function() {\n          if ((this.zoomLevel + this.zoomRate) < this.maxZoom) {\n            this.zoomMap(this.zoomLevel + this.zoomRate);\n          }\n        }, this);\n        this.game.input.onDown.add(this.getTileProperties, this);\n        this.loadingDelta = 5;\n        this.loading = false;\n        this.loadingDeltaWait = this.LOADDELAY;\n        this.loadingFinished = true;\n\n      }\n\n    }\n    if (this.loadingFinished == true) {\n      //CAMERA PAN\n      if (this.game.input.mousePointer.x > this.SCREENWIDTH - this.MOUSEBOUNDS) {\n        this.game.camera.x += (this.TILESIZE / this.zoomLevel);\n      }\n      if (this.game.input.mousePointer.x < 0 + this.MOUSEBOUNDS) {\n        this.game.camera.x -= (this.TILESIZE / this.zoomLevel);\n      }\n      if (this.game.input.mousePointer.y > this.SCREENHEIGHT - this.MOUSEBOUNDS) {\n        this.game.camera.y += (this.TILESIZE / this.zoomLevel);\n      }\n      if (this.game.input.mousePointer.y < 0 + this.MOUSEBOUNDS) {\n        this.game.camera.y -= (this.TILESIZE / this.zoomLevel);\n      }\n\n      //  this.centerMarker.x = (this.game.camera.view.halfWidth + this.game.camera.x);\n      //  this.centerMarker.y = (this.game.camera.view.halfHeight + this.game.camera.y);\n\n      //http://jsfiddle.net/valueerror/pdx0px0w/\n      if (this.marker && this.topTerrainGridLayer) { ///4\n        this.marker.x = this.topTerrainGridLayer.getTileX(this.game.input.activePointer.worldX * this.zoomLevel) * this.TILESIZE / this.zoomLevel;\n        this.marker.y = this.topTerrainGridLayer.getTileY(this.game.input.activePointer.worldY * this.zoomLevel) * this.TILESIZE / this.zoomLevel;\n      }\n\n      //ZOOM\n      if (this.cursors !== null) {\n        if (this.cursors.up.isDown) {\n          this.game.camera.y -= (this.TILESIZE / this.zoomLevel);\n        } else if (this.cursors.down.isDown) {\n          this.game.camera.y += (this.TILESIZE / this.zoomLevel);\n        }\n        if (this.cursors.left.isDown) {\n          this.game.camera.x -= (this.TILESIZE / this.zoomLevel);\n        } else if (this.cursors.right.isDown) {\n          this.game.camera.x += (this.TILESIZE / this.zoomLevel);\n        }\n      }\n    }\n  }\n\n  render() {\n    //this.game.debug.text(this.game.time.fps || '--', 20, 44, \"#ffca42\");\n    //this.game.debug.text(this.loadingDelta || '--', 2, 44, \"#ff0000\");\n  }\n\n  buildMapInfo(json) {\n\n    //SETUP LOADING\n    let rawSizes = null;\n    if (json.savegame.game.maps.li.length) {\n      json.savegame.game.maps.li = json.savegame.game.maps.li[0];\n    }\n    rawSizes = json.savegame.game.maps.li.mapInfo.size;\n\n    let sizes = this.getPosition(rawSizes);\n\n    this.worldSize.x = sizes[0];\n    this.worldSize.y = sizes[2];\n    this.worldSize.z = sizes[1];\n\n    this.loadingDelta = 1;\n\n    this.mapInfo.width = this.TILESIZE * this.worldSize.x;\n    this.mapInfo.height = this.TILESIZE * this.worldSize.y;\n\n    this.mapInfo.topTerrainGrid = this.decompress(json.savegame.game.maps.li.terrainGrid.topGridDeflate);\n    this.mapInfo.underTerrainGrid = this.decompress(json.savegame.game.maps.li.terrainGrid.underGridDeflate);\n    //this.mapInfo.roofTerrainGrid = this.decompress(json.savegame.game.maps.li.roofGrid);\n    this.mapInfo.resourceRefGrid = this.decompress(json.savegame.game.maps.li.compressedThingMapDeflate);\n\n    this.mapInfo.deepResourceGrid = this.decompress(json.savegame.game.maps.li.deepResourceGrid.defGridDeflate);\n    this.mapInfo.deepResourceCount = this.decompress(json.savegame.game.maps.li.deepResourceGrid.countGridDeflate);\n\n    this.mapInfo.topTerrainGrid = this.mapTextures(this.mapInfo.topTerrainGrid, \"terrain\");\n    this.mapInfo.stuffGrid = json.savegame.game.maps.li.things.thing;\n\n  }\n\n  renderBitmap(group, center) {\n\n    const BMPCHUNKS = 1;\n    const CHUNK_WIDTH = this.mapInfo.width / BMPCHUNKS;\n    const CHUNK_HEIGHT = this.mapInfo.height / BMPCHUNKS;\n\n    let outputGroup = this.game.add.group();\n\n    let groupPosX = 0;\n    let groupPosY = 0;\n\n    let renderdChunks = [];\n    let renderOutput = null;\n\n    let bmd = null;\n\n    if (center) {\n      groupPosX = -this.mapInfo.width / 2;\n      groupPosY = this.mapInfo.height / 2;\n      group.pivot.x = -this.mapInfo.width / 2;\n      group.pivot.y = -this.mapInfo.height / 2;\n    } else {\n      groupPosX = 0;\n      groupPosY = this.mapInfo.height;\n      group.pivot.x = 0;\n      group.pivot.y = 0;\n    }\n\n    for (let i = 0; i < BMPCHUNKS; i++) {\n      group.position.x = groupPosX;\n      for (let j = 0; j < BMPCHUNKS; j++) {\n\n        group.position.y = groupPosY;\n\n        //This is the BitmapData we're going to be drawing to\n        bmd = this.game.add.bitmapData(CHUNK_WIDTH, CHUNK_HEIGHT, false);\n        renderOutput = bmd.addToWorld(CHUNK_HEIGHT * i, CHUNK_HEIGHT * j, 0, 0, 0.5, 0.5);\n\n        this.game.stage.updateTransform();\n        //  Draw the group to the BitmapData\n\n        //bmd.drawFull(this.game.world);\n        bmd.baseTexture.resolution = 0.5;\n\n        //bmd.scale.set(1.5,1.5);\n        //bmd.baseTexture.skipRender = true;\n        //bmd.baseTexture.unloadFromGPU();\n        bmd.disableTextureUpload = true;\n\n        bmd.drawGroup(group);\n\n        renderdChunks.push(renderOutput);\n\n        outputGroup.add(renderOutput);\n        groupPosY = CHUNK_HEIGHT;\n\n      }\n      groupPosY = this.mapInfo.height;\n      groupPosX = -CHUNK_WIDTH;\n\n    }\n    //  bmd.cls();\n\n    bmd = null;\n\n    group.destroy(true, false);\n\n    return outputGroup;\n  }\n\n  renderTerrainTileMap() {\n\n    this.game.cache.addTilemap('dynamicMap', null, this.makeCSV(this.mapInfo.topTerrainGrid), Phaser.Tilemap.CSV);\n    let tileMap = this.game.add.tilemap('dynamicMap', this.TILESIZE, this.TILESIZE);\n    tileMap.addTilesetImage('tiles', 'tiles', this.TILESIZE, this.TILESIZE);\n    //  0 is important\n    this.topTerrainGridLayer = tileMap.createLayer(0);\n    this.topTerrainGridLayer.renderSettings.enableScrollDelta = false;\n\n    this.topTerrainGridLayer.resizeWorld();\n  }\n\n  renderResourceTileMap() {\n\n    let masterIndex = 0;\n    let resourceSprite = null;\n\n    for (let i = 0; i < this.worldSize.x; i++) {\n      for (let j = 0; j < this.worldSize.y; j++) {\n        if (this.mapInfo.resourceRefGrid[masterIndex] > 0) {\n\n          switch (this.mapInfo.resourceRefGrid[masterIndex]) {\n\n            case 78: //Marble chunk\n              resourceSprite = this.game.add.sprite((j * this.TILESIZE), -((i + 1) * this.TILESIZE), 'chunk');\n              resourceSprite.scale.setTo(this.SCALESIZE);\n              resourceSprite.tint = this.MARBLE;\n              this.resourceGridLayer.add(resourceSprite);\n              break;\n            case 119: //Limestone chunk\n              resourceSprite = this.game.add.sprite((j * this.TILESIZE), -((i + 1) * this.TILESIZE), 'chunk');\n              resourceSprite.scale.setTo(this.SCALESIZE);\n              resourceSprite.tint = this.LIMESTONE;\n              this.resourceGridLayer.add(resourceSprite);\n              break;\n            case 252: //Granite chunk\n              resourceSprite = this.game.add.sprite((j * this.TILESIZE), -((i + 1) * this.TILESIZE), 'chunk');\n              resourceSprite.scale.setTo(this.SCALESIZE);\n              resourceSprite.tint = this.GRANITE;\n              this.resourceGridLayer.add(resourceSprite);\n              break;\n            case 102: //Slate chunk\n              resourceSprite = this.game.add.sprite((j * this.TILESIZE), -((i + 1) * this.TILESIZE), 'chunk');\n              resourceSprite.scale.setTo(this.SCALESIZE);\n              resourceSprite.tint = this.SLATE;\n              this.resourceGridLayer.add(resourceSprite);\n            case 47: //Sandstone chunk\n              resourceSprite = this.game.add.sprite((j * this.TILESIZE), -((i + 1) * this.TILESIZE), 'chunk');\n              resourceSprite.scale.setTo(this.SCALESIZE);\n              resourceSprite.tint = this.SANDSTONE;\n              this.resourceGridLayer.add(resourceSprite);\n              break;\n            case 241: //Metal Chunk\n              resourceSprite = this.game.add.sprite((j * this.TILESIZE), -((i + 1) * this.TILESIZE), 'slag');\n              resourceSprite.scale.setTo(this.SCALESIZE);\n              this.resourceGridLayer.add(resourceSprite);\n              break;\n            case 17: //Plasteel\n              resourceSprite = this.game.add.sprite((j * this.TILESIZE), -((i + 1) * this.TILESIZE), 'resourceTint');\n              resourceSprite.scale.setTo(this.SCALESIZE);\n              resourceSprite.tint = this.PLASTEEL;\n              this.resourceGridLayer.add(resourceSprite);\n              break;\n            case 56: //compactmach\n              resourceSprite = this.game.add.sprite((j * this.TILESIZE), -((i + 1) * this.TILESIZE), 'resourceTint');\n              resourceSprite.scale.setTo(this.SCALESIZE);\n              resourceSprite.tint = this.COMPONENTS;\n              this.resourceGridLayer.add(resourceSprite);\n              break;\n            case 156: //Steel\n              resourceSprite = this.game.add.sprite((j * this.TILESIZE), -((i + 1) * this.TILESIZE), 'resourceTint');\n              resourceSprite.scale.setTo(this.SCALESIZE);\n              resourceSprite.tint = this.STEEL;\n              this.resourceGridLayer.add(resourceSprite);\n              break;\n            case 103: //Uruianum\n              resourceSprite = this.game.add.sprite((j * this.TILESIZE), -((i + 1) * this.TILESIZE), 'resourceTint');\n              resourceSprite.scale.setTo(this.SCALESIZE);\n              resourceSprite.tint = this.URANIUM;\n              this.resourceGridLayer.add(resourceSprite);\n              break;\n            case 229: //GOLD\n              resourceSprite = this.game.add.sprite((j * this.TILESIZE), -((i + 1) * this.TILESIZE), 'resourceTint');\n              resourceSprite.scale.setTo(this.SCALESIZE);\n              resourceSprite.tint = this.GOLD;\n              this.resourceGridLayer.add(resourceSprite);\n              break;\n\n            case 194: // Sliver\n              resourceSprite = this.game.add.sprite((j * this.TILESIZE), -((i + 1) * this.TILESIZE), 'resourceTint');\n              resourceSprite.scale.setTo(this.SCALESIZE);\n              resourceSprite.tint = this.SILVER;\n              this.resourceGridLayer.add(resourceSprite);\n              break;\n\n            case 127: // Jade\n              resourceSprite = this.game.add.sprite((j * this.TILESIZE), -((i + 1) * this.TILESIZE), 'resourceTint');\n              resourceSprite.scale.setTo(this.SCALESIZE);\n              resourceSprite.tint = this.JADE;\n              this.resourceGridLayer.add(resourceSprite);\n              break;\n          }\n        }\n        masterIndex++;\n      }\n    }\n  }\n\n  renderDeepResourceTileMap() {\n\n    let masterIndex = 0;\n    let deepResourceSprite = null;\n    for (let i = 0; i < this.worldSize.x; i++) {\n      for (let j = 0; j < this.worldSize.y; j++) {\n        if (this.mapInfo.deepResourceGrid[masterIndex] > 0) {\n          //TODO\n          deepResourceSprite = this.game.add.sprite((j * this.TILESIZE), -((i + 1) * this.TILESIZE), 'resourceTint');\n          deepResourceSprite.scale.setTo(this.SCALESIZE);\n          deepResourceSprite.tint = 0x00ff00;\n          this.deepResourceGridLayer.add(deepResourceSprite);\n        }\n        masterIndex++;\n      }\n    }\n  }\n\n  renderWalls() {\n    let walls = [];\n    let sandbags = [];\n\n    let wallSprite = null;\n    let sandbagSprite = null;\n\n    let thingPos = null;\n    //BUILD EMPTY WALL ARRAY\n    for (var i = 0; i < this.worldSize.x; i++) {\n      if (!this.mapInfo.stuffRefGrid[i]) {\n        this.mapInfo.stuffRefGrid[i] = [];\n        walls[i] = [];\n        sandbags[i] = [];\n      }\n      for (var j = 0; j < this.worldSize.y; j++) {\n        this.mapInfo.stuffRefGrid[i][j] = [];\n        walls[i][j] = 0;\n        sandbags[i][j] = 0;\n      }\n    }\n\n    for (let i = 0; i < this.mapInfo.stuffGrid.length; i++) {\n      thingPos = this.getPosition(this.mapInfo.stuffGrid[i].pos);\n      this.mapInfo.stuffRefGrid[thingPos[0]][thingPos[2]].push(this.mapInfo.stuffGrid[i]);\n      if (this.mapInfo.stuffGrid[i].def == \"Wall\") {\n        walls[thingPos[0]][thingPos[2]] = 1;\n      } else if (this.mapInfo.stuffGrid[i].def == \"Sandbags\") {\n        sandbags[thingPos[0]][thingPos[2]] = 1;\n      }\n    }\n\n    for (let i = this.mapInfo.stuffGrid.length - 1; i > 0; i--) {\n      thingPos = this.getPosition(this.mapInfo.stuffGrid[i].pos);\n\n      if (this.mapInfo.stuffGrid[i].def == \"Wall\") {\n        let chunk = [];\n        let direction = null;\n        let wallStuff = null;\n\n        if (walls[thingPos[0] + 1]) {\n          chunk = [\n            [0, walls[thingPos[0]][thingPos[2] + 1], 0],\n            [walls[thingPos[0] - 1][thingPos[2]], 1, walls[thingPos[0] + 1][thingPos[2]]],\n            [0, walls[thingPos[0]][thingPos[2] - 1], 0]\n          ];\n        }\n\n        switch (this.mapInfo.stuffGrid[i].stuff) {\n          case \"BlocksGranite\":\n          case \"BlocksSlate\":\n          case \"BlocksMarble\":\n          case \"BlocksLimestone\":\n          case \"BlocksSandstone\":\n            wallStuff = \"brickWallTiles\"\n            break;\n          case \"WoodLog\":\n            wallStuff = \"woodWallTiles\"\n            break;\n            //TODO ADD SMOOTH\n          default:\n            wallStuff = \"wallTiles\";\n        }\n        direction = this.matchWall(chunk);\n        wallSprite = this.game.add.sprite(\n          (thingPos[0] * this.TILESIZE), -(thingPos[2] * this.TILESIZE),\n          wallStuff, direction\n        );\n        switch (this.mapInfo.stuffGrid[i].stuff) {\n          case \"BlocksSandstone\":\n            wallSprite.tint = this.SANDSTONE;\n            break;\n          case \"BlocksGranite\":\n            wallSprite.tint = this.GRANITE;\n            break;\n          case \"BlocksSlate\":\n            wallSprite.tint = this.SLATE;\n            break;\n          case \"BlocksLimestone\":\n            wallSprite.tint = this.LIMESTONE;\n            break;\n          case \"BlocksMarble\":\n            wallSprite.tint = this.MARBLE;\n            break;\n          case \"WoodLog\":\n            wallSprite.tint = this.WOOD;\n            break;\n          default:\n            wallSprite.tint = 0xffffff;\n        }\n\n        wallSprite.scale.setTo(this.SCALESIZE);\n        wallSprite.anchor.setTo(0.1, 0.9);\n        this.stuffGridLayer.add(wallSprite);\n\n      } else if (this.mapInfo.stuffGrid[i].def == \"Sandbags\") {\n        let chunk = [];\n        let direction = null;\n\n        if (sandbags[thingPos[0] + 1]) {\n          chunk = [\n            [0, sandbags[thingPos[0]][thingPos[2] + 1], 0],\n            [sandbags[thingPos[0] - 1][thingPos[2]], 1, sandbags[thingPos[0] + 1][thingPos[2]]],\n            [0, sandbags[thingPos[0]][thingPos[2] - 1], 0]\n          ];\n        }\n        direction = this.matchWall(chunk);\n        sandbagSprite = this.game.add.sprite(\n          (thingPos[0] * this.TILESIZE), -(thingPos[2] * this.TILESIZE),\n          'sandbagTiles', direction\n        );\n        sandbagSprite.tint = this.SAND;\n        sandbagSprite.scale.setTo(this.SCALESIZE);\n        sandbagSprite.anchor.setTo(0.1, 0.9);\n        this.stuffGridLayer.add(sandbagSprite);\n      } //End Wall Sandbag elseif\n    } //End For\n  }\n\n  renderStuff() {\n\n    let thingPos = null;\n    let thingSprite = null;\n    let rockUnderSprite = null;\n\n    let filterName = null;\n\n    for (let i = this.mapInfo.stuffGrid.length - 1; i > 0; i--) {\n\n      filterName = this.getStuffName(this.mapInfo.stuffGrid[i].def);\n      thingPos = this.getPosition(this.mapInfo.stuffGrid[i].pos);\n\n      //First check if the stuff is a damged rock if so add it to rocks and discard\n      //Second check if its not a wall, sandbag, animal or anything undesiraable\n      if (this.mapInfo.stuffGrid[i].def == \"Granite\" ||\n        this.mapInfo.stuffGrid[i].def == \"Limestone\" ||\n        this.mapInfo.stuffGrid[i].def == \"Sandstone\" ||\n        this.mapInfo.stuffGrid[i].def == \"Marble\" ||\n        this.mapInfo.stuffGrid[i].def == \"Slate\" ||\n        this.mapInfo.stuffGrid[i].def == \"MineableSteel\") {\n\n        this.rockGrid[thingPos[2]][thingPos[0]] = 1;\n\n      } else if (\n        this.mapInfo.stuffGrid[i].def != \"Wall\" &&\n        this.mapInfo.stuffGrid[i].def != \"Sandbags\" &&\n        this.isAllowedStuff(filterName) &&\n        this.isAnimal(filterName)) {\n\n        thingSprite = this.game.add.sprite(\n          (thingPos[0] * this.TILESIZE), -(thingPos[2] * this.TILESIZE),\n          filterName\n        );\n\n        if (this.mapInfo.stuffGrid[i].def != \"WoodLog\" && //Dont color sprites that are pre-colored\n          this.mapInfo.stuffGrid[i].def != \"Steel\" &&\n          this.mapInfo.stuffGrid[i].def != \"Plasteel\" &&\n          this.mapInfo.stuffGrid[i].def != \"Jade\" &&\n          this.mapInfo.stuffGrid[i].def != \"Silver\" &&\n          this.mapInfo.stuffGrid[i].def != \"Gold\") {\n\n          thingSprite = this.colorSprite(thingSprite, this.mapInfo.stuffGrid[i]);\n          //x_Meat does not change color depending on animal so just color it all\n          if (filterName == \"Meat\") {\n            thingSprite.tint = this.MEAT;\n          }\n        }\n\n        //Rotate the thing correctly\n        thingSprite.scale.setTo(this.SCALESIZE);\n        thingSprite = this.thingAlign(thingSprite, this.mapInfo.stuffGrid[i]);\n        if (this.mapInfo.stuffGrid[i].growth) {\n          if (this.mapInfo.stuffGrid[i].growth <= 0.1) {\n            thingSprite.destroy();\n          } else {\n            thingSprite.scale.setTo(this.mapInfo.stuffGrid[i].growth * (this.SCALESIZE));\n          }\n        }\n\n        if (thingSprite) {\n          this.stuffGridLayer.add(thingSprite);\n        }\n\n        if (thingSprite && this.mapInfo.stuffGrid[i].def == \"SteamGeyser\" ||\n          thingSprite && this.mapInfo.stuffGrid[i].def == \"Shelf\" ||\n          thingSprite && this.mapInfo.stuffGrid[i].def == \"PlantPot\") {\n          this.stuffGridLayer.sendToBack(thingSprite);\n        }\n      } //printsprite\n\n    } //End for Loop\n  }\n  thingAlign(sprite, data) {\n\n    let outputSprite = sprite;\n\n    //64x64 0\n    if (outputSprite.height == this.TILESIZE && outputSprite.width == this.TILESIZE) {\n      outputSprite.anchor.setTo(0, 1);\n      if (data.rot) {\n        if (data.rot == 1) {\n          outputSprite.angle = 90;\n          outputSprite.anchor.setTo(1, 1);\n        }\n        if (data.rot == 2) {\n          outputSprite.angle = 180;\n          outputSprite.anchor.setTo(1, 0);\n        }\n        if (data.rot == 3) {\n          outputSprite.angle = -90;\n          outputSprite.anchor.setTo(0, 0);\n        }\n      }\n    } else if (outputSprite.height == (this.TILESIZE * 2) &&\n      outputSprite.width == this.TILESIZE) { //\n\n      outputSprite.anchor.setTo(0, 1);\n      if (data.rot) {\n        if (data.rot == 1) {\n          outputSprite.angle = 90;\n          outputSprite.anchor.setTo(1, 1);\n        }\n        if (data.rot == 2) {\n          outputSprite.angle = 180; //ok\n          outputSprite.anchor.setTo(1, 0.5);\n        }\n        if (data.rot == 3) {\n          outputSprite.angle = -90;\n          outputSprite.anchor.setTo(0, 0.5);\n        }\n      }\n    } else if (outputSprite.height == (this.TILESIZE * 4) &&\n      outputSprite.width == this.TILESIZE) { //\n\n      outputSprite.anchor.setTo(0, 0.75);\n      if (data.rot) {\n        if (data.rot == 1) {\n          outputSprite.angle = 90;\n          outputSprite.anchor.setTo(1, 0.75);\n        }\n        if (data.rot == 2) {\n          outputSprite.angle = 180; //ok\n          outputSprite.anchor.setTo(1, 0.5);\n        }\n        if (data.rot == 3) {\n          outputSprite.angle = -90;\n          outputSprite.anchor.setTo(0, 0.5);\n        }\n      }\n    } else if (outputSprite.height == this.TILESIZE &&\n      outputSprite.width == (this.TILESIZE * 2)) {\n      outputSprite.anchor.setTo(0, 1);\n      if (data.rot) {\n        if (data.rot == 1) {\n          outputSprite.angle = 90;\n          outputSprite.anchor.setTo(0.5, 1);\n        }\n        if (data.rot == 2) {\n          outputSprite.angle = 180;\n          outputSprite.anchor.setTo(0.5, 0);\n        }\n        if (data.rot == 3) {\n          outputSprite.angle = -90; //good\n          outputSprite.anchor.setTo(0, 0);\n        }\n      }\n    } else if (outputSprite.height == (this.TILESIZE * 2) &&\n      outputSprite.width == (this.TILESIZE * 4)) {\n      outputSprite.anchor.setTo(0.4, 0.75);\n      if (data.rot) {\n        if (data.rot == 1) {\n          outputSprite.angle = 90;\n          outputSprite.anchor.setTo(0.5, 1);\n        }\n        if (data.rot == 2) {\n          outputSprite.angle = 180;\n          outputSprite.anchor.setTo(0.6, 0.6);\n        }\n        if (data.rot == 3) {\n          outputSprite.angle = -90; //good\n          outputSprite.anchor.setTo(1, 0.5);\n        }\n      }\n    } else if (outputSprite.height == (this.TILESIZE * 2) &&\n      outputSprite.width == (this.TILESIZE * 2)) {\n\n      outputSprite.anchor.setTo(0, 1);\n      if (data.rot) {\n        if (data.rot == 1) {\n          outputSprite.angle = 90;\n          outputSprite.anchor.setTo(0.5, 1);\n        }\n        if (data.rot == 2) {\n          outputSprite.angle = 180;\n          outputSprite.anchor.setTo(0.5, 0.5);\n        }\n        if (data.rot == 3) {\n          outputSprite.angle = -90; //good\n          outputSprite.anchor.setTo(0, 0.5);\n        }\n      }\n    } else if (outputSprite.height == (this.TILESIZE * 3) &&\n      outputSprite.width == (this.TILESIZE * 3)) {\n      outputSprite.anchor.setTo(0.35, 0.65);\n\n      if (data.rot == 1) {\n        outputSprite.anchor.setTo(0.5, 0.5);\n        outputSprite.angle = 90;\n      }\n      if (data.rot == 2) {\n        outputSprite.anchor.setTo(0.65, 0.35);\n        outputSprite.angle = 180;\n      }\n      if (data.rot == 3) {\n        outputSprite.anchor.setTo(0.5, 0.5);\n        outputSprite.angle = -90; //good\n      }\n\n\n    } else if (outputSprite.height == this.TILESIZE &&\n      outputSprite.width == (this.TILESIZE * 3)) {\n      outputSprite.anchor.setTo(0.4, 1);\n      if (data.rot == 1) {\n        outputSprite.angle = 90;\n        outputSprite.anchor.setTo(0.6, 1);\n      }\n      if (data.rot == 2) {\n        outputSprite.angle = 180;\n        outputSprite.anchor.setTo(0.6, 0);\n      }\n      if (data.rot == 3) {\n        outputSprite.angle = -90; //good\n        outputSprite.anchor.setTo(0.3, 0);\n      }\n\n    } else if (outputSprite.height == (this.TILESIZE * 4) &&\n      outputSprite.width == (this.TILESIZE * 4)) {\n      if (!data.rot) {\n        outputSprite.anchor.setTo(0.25, 0.75);\n      }\n      if (data.rot == 1) {\n        outputSprite.anchor.setTo(0.5, 0.75);\n        outputSprite.angle = 90;\n      }\n      if (data.rot == 2) {\n        outputSprite.anchor.setTo(0.5, 0.5);\n        outputSprite.angle = 180;\n      }\n      if (data.rot == 3) {\n        outputSprite.anchor.setTo(0.75, 0.25);\n        outputSprite.angle = -90; //good\n      }\n    } else if (outputSprite.height == (this.TILESIZE * 8) &&\n      outputSprite.width == (this.TILESIZE * 8)) {\n      outputSprite.anchor.setTo(0.4, 0.65);\n\n    } else if (outputSprite.height == (this.TILESIZE * 2) &&\n      outputSprite.width == (this.TILESIZE * 5)) {\n      outputSprite.anchor.setTo(0.4, 0);\n      if (data.rot) {\n        if (data.rot == 1) {\n          outputSprite.angle = 90;\n          outputSprite.anchor.setTo(0.5, 1);\n        }\n        if (data.rot == 2) {\n          outputSprite.angle = 180;\n          outputSprite.anchor.setTo(0.6, 0.5);\n        }\n        if (data.rot == 3) {\n          outputSprite.angle = -90; //good\n          outputSprite.anchor.setTo(1, 0.5);\n        }\n      }\n    } else {\n      outputSprite.anchor.setTo(0, 1);\n    }\n    return outputSprite;\n  }\n  renderMountain() {\n\n    //IF WALL CHOOSE WALL SPRITE\n    let chunk = [];\n    let masterIndex = 0;\n    let rockSprite;\n    let rockTint;\n\n    for (let i = 0; i < this.worldSize.x; i++) {\n      for (let j = 0; j < this.worldSize.y; j++) {\n        if (this.mapInfo.resourceRefGrid[masterIndex] > 0) {\n\n          switch (this.mapInfo.resourceRefGrid[masterIndex]) {\n\n            case 120: //?!?!?!?!? TODO\n            case 78: //Marble chunk\n            case 119: //Limestone chunk\n            case 252: //Granite chunk\n            case 102: //Slate chunk\n            case 47: //Sandstone chunk\n            case 241: //Metal Chunk\n\n              this.rockGrid[i][j] = 0; //Ignore Rock chunks\n              break;\n            default:\n              this.rockGrid[i][j] = 1;\n          }\n        }\n        masterIndex++;\n      }\n    }\n    masterIndex = 0;\n    let direction = null;\n    let rockTintSprite = null;\n\n    for (let i = 0; i < this.worldSize.x; i++) {\n      for (let j = 0; j < this.worldSize.y; j++) {\n        if (this.rockGrid[i][j] == 1) {\n          if (this.rockGrid[i - 1] && this.rockGrid[j - 1] && this.rockGrid[i + 1] && this.rockGrid[j + 1]) {\n            chunk = [\n              [0, this.rockGrid[i + 1][j], 0],\n              [this.rockGrid[i][j - 1], 1, this.rockGrid[i][j + 1]],\n              [0, this.rockGrid[i - 1][j], 0]\n            ];\n            direction = this.matchWall(chunk);\n          } else {\n            direction = null;\n          }\n\n          //Decide color here\n          if (direction != null) {\n            rockSprite = this.game.add.sprite(\n              (j * this.TILESIZE), -(i * this.TILESIZE),\n              'rockTiles', direction\n            );\n\n            rockSprite.anchor.setTo(0.1, 0.9);\n\n            switch (this.mapInfo.topTerrainGrid[masterIndex] + 1) {\n              case 41:\n                rockSprite.tint = this.SANDSTONE;\n                break;\n              case 50:\n                rockSprite.tint = this.SLATE;\n                break;\n              case 44:\n                rockSprite.tint = this.GRANITE;\n                break;\n              case 52:\n                rockSprite.tint = this.MARBLE;\n                break;\n              case 47:\n                rockSprite.tint = this.LIMESTONE;\n                break;\n            }\n            rockSprite.scale.setTo(this.SCALESIZE);\n            this.rocksGridLayer.add(rockSprite);\n          }\n\n          //Tint all rock tiles and add to mountain group\n          rockTint = null;\n\n          rockTint = this.game.add.sprite(\n            (j * this.TILESIZE), -((i + 1) * this.TILESIZE),\n            'rockTint'\n          );\n          //this has a weird problem\n          rockTint.scale.setTo(this.SCALESIZE);\n          this.mountainsLayer.add(rockTint);\n        }\n        masterIndex++;\n      }\n    }\n    //this.mapInfo.resourceRefGrid = this.formatArray(this.mapInfo.resourceRefGrid);\n  }\n\n  colorSprite(sprite, thingRef) {\n    //If thing has stuff do stuff case, if not do based on names\n    let currentSprite = null;\n\n    if (thingRef.color) {\n      let rawColor = this.getColor(thingRef.color);\n      let hexColor = Phaser.Color.getColor(rawColor[0], rawColor[1], rawColor[2]);\n      sprite.tint = hexColor\n    } else {\n      if (thingRef.stuff) {\n        currentSprite = thingRef.stuff;\n      } else {\n        currentSprite = thingRef.def;\n      }\n      switch (currentSprite) {\n        case \"ChunkSandstone\":\n          sprite.tint = this.SANDSTONE;\n          break;\n        case \"ChunkGranite\":\n          sprite.tint = this.GRANITE;\n          break;\n        case \"ChunkSlate\":\n          sprite.tint = this.SLATE;\n          break;\n        case \"ChunkLimestone\":\n          sprite.tint = this.LIMESTONE;\n          break;\n        case \"ChunkMarble\":\n          sprite.tint = this.MARBLE;\n          break;\n        case \"BlocksSandstone\":\n          sprite.tint = this.SANDSTONE;\n          break;\n        case \"BlocksGranite\":\n          sprite.tint = this.GRANITE;\n          break;\n        case \"BlocksSlate\":\n          sprite.tint = this.SLATE;\n          break;\n        case \"BlocksLimestone\":\n          sprite.tint = this.LIMESTONE;\n          break;\n        case \"BlocksMarble\":\n          sprite.tint = this.MARBLE;\n          break;\n        case \"WoodLog\":\n          sprite.tint = 0xBF6C2A;\n          break;\n        case \"Cloth\":\n          sprite.tint = this.CLOTH;\n          break;\n        case \"WoolMuffalo\":\n        case \"Muffalo_Leather\":\n          sprite.tint = this.MUFFALO;\n          break;\n        case \"WoolAlpaca\":\n        case \"Alpaca_Leather\":\n          sprite.tint = this.ALPACA;\n          break;\n\n        case \"DevilstrandCloth\":\n          sprite.tint = this.DEVILSTRAND;\n          break;\n        case \"Alphabeaver_Leather\":\n          sprite.tint = this.ALPHABEAVER;\n          break;\n        case \"FoxArctic_Leather\":\n          sprite.tint = this.FOXARCTIC;\n          break;\n        case \"WolfArctic_Leather\":\n          sprite.tint = this.WOLFARCTIC;\n          break;\n        case \"Boomalope_Leather\":\n          sprite.tint = this.BOOMALOPE;\n          break;\n        case \"Boomrat_Leather\":\n          sprite.tint = this.BOOMRAT;\n          break;\n        case \"Capybara_Leather\":\n          sprite.tint = this.CAPYBARA;\n          break;\n        case \"Caribou_Leather\":\n          sprite.tint = this.CARIBOU;\n          break;\n        case \"WoolCamel\":\n        case \"Camel_Leather\":\n          sprite.tint = this.CAMEL;\n          break;\n        case \"Cassowary_Leather\":\n          sprite.tint = this.CASSOWARY;\n          break;\n        case \"Cat_Leather\":\n          sprite.tint = this.CAT;\n          break;\n        case \"Chicken_Leather\":\n          sprite.tint = this.CHICKEN;\n          break;\n        case \"Chinchilla_Leather\":\n          sprite.tint = this.CHINCHILLA;\n          break;\n        case \"Cobra_Leather\":\n          sprite.tint = this.ALPACA;\n          break;\n        case \"Cougar_Leather\":\n          sprite.tint = this.COUGAR;\n          break;\n        case \"Cow_Leather\":\n          sprite.tint = this.COW;\n          break;\n        case \"Deer_Leather\":\n          sprite.tint = this.DEER;\n          break;\n        case \"Dromedary_Leather\":\n          sprite.tint = this.DROMEDARY;\n          break;\n        case \"Elephant_Leather\":\n          sprite.tint = this.ELEPHANT;\n          break;\n        case \"Elk_Leather\":\n          sprite.tint = this.ELK;\n          break;\n        case \"Emu_Leather\":\n          sprite.tint = this.EMU;\n          break;\n        case \"FoxFennec_Leather\":\n          sprite.tint = this.FOXFENNEC;\n          break;\n        case \"Gazelle_Leather\":\n          sprite.tint = this.GAZELLE;\n          break;\n        case \"GrizzlyBear_Leather\":\n          sprite.tint = this.GRIZZLYBEAR;\n          break;\n        case \"Hare_Leather\":\n          sprite.tint = this.HARE;\n          break;\n        case \"Husky_Leather\":\n          sprite.tint = this.HUSKY;\n          break;\n        case \"Ibex_Leather\":\n          sprite.tint = this.IBEX;\n          break;\n        case \"Iguana_Leather\":\n          sprite.tint = this.IGUANA;\n          break;\n        case \"LabradorRetriever_Leather\":\n          sprite.tint = this.LABRADORRETRIEVER;\n          break;\n        case \"Lynx_Leather\":\n          sprite.tint = this.LYNX;\n          break;\n        case \"WoolMegasloth\":\n        case \"Megasloth_Leather\":\n          sprite.tint = this.MEGASLOTH;\n          break;\n        case \"Monkey_Leather\":\n          sprite.tint = this.MONKEY;\n          break;\n        case \"Ostrich_Leather\":\n          sprite.tint = this.OSTRICH;\n          break;\n        case \"Panther_Leather\":\n          sprite.tint = this.PANTHER;\n          break;\n        case \"Pig_Leather\":\n          sprite.tint = this.PIG;\n          break;\n        case \"PolarBear_Leather\":\n          sprite.tint = this.POLARBEAR;\n          break;\n        case \"Raccoon_Leather\":\n          sprite.tint = this.RACCOON;\n          break;\n        case \"Rat_Leather\":\n          sprite.tint = this.RAT;\n          break;\n        case \"FoxRed_Leather\":\n          sprite.tint = this.FOXRED;\n          break;\n        case \"Rhinoceros_Leather\":\n          sprite.tint = this.RHINOCEROS;\n          break;\n        case \"Snowhare_Leather\":\n          sprite.tint = this.SNOWHARE;\n          break;\n        case \"Squirrel_Leather\":\n          sprite.tint = this.SQUIRREL;\n          break;\n        case \"WolfTimber_Leather\":\n          sprite.tint = this.WOLFTIMBER;\n          break;\n        case \"Tortoise_Leather\":\n          sprite.tint = this.TORTOISE;\n          break;\n        case \"Turkey_Leather\":\n          sprite.tint = this.TURKEY;\n          break;\n        case \"Warg_Leather\":\n          sprite.tint = this.WARG;\n          break;\n        case \"WildBoar_Leather\":\n          sprite.tint = this.WILDBOAR;\n          break;\n        case \"YorkshireTerrier_Leather\":\n          sprite.tint = this.YORKSHIRETERRIER;\n          break;\n        case \"Human_Leather\":\n          sprite.tint = this.HUMAN;\n          break;\n        case \"Steel\":\n          sprite.tint = this.STEEL;\n          break;\n        case \"Plasteel\":\n          sprite.tint = this.PLASTEEL;\n          break;\n        case \"Jade\":\n          sprite.tint = this.JADE;\n          break;\n        case \"Gold\":\n          sprite.tint = this.GOLD;\n          break;\n        case \"Silver\":\n          sprite.tint = this.SILVER;\n          break;\n        case \"Uruianum\":\n          sprite.tint = this.URANIUM;\n          break;\n        case \"StandingLamp_Red\":\n          sprite.tint = 0xFF0000;\n          break;\n        case \"StandingLamp_Blue\":\n          sprite.tint = 0x0000FF;\n          break;\n        case \"StandingLamp_Green\":\n          sprite.tint = 0x00FF00;\n          break;\n        default:\n          //thingSprite.tint = 0xffffff;\n      }\n    }\n\n    return sprite;\n  }\n\n  getStuffName(stuff) {\n    let regex = new RegExp('\\_(.*)');\n    let preRegex = new RegExp('(.*)\\_');\n    let filterName = null;\n    if (regex.exec(stuff)) {\n      if (preRegex.exec(stuff)[1] == \"Shell\" ||\n        preRegex.exec(stuff)[1] == \"TrapIED\") {\n        filterName = stuff;\n      } else if (preRegex.exec(stuff)[1] == \"Plant\") { //VERSION 0.19\n        filterName = preRegex.exec(stuff)[1] + regex.exec(stuff)[1];\n      } else {\n        filterName = regex.exec(stuff)[1];\n      }\n    } else {\n      filterName = stuff;\n    }\n    return filterName;\n\n  }\n  matchWall(chunk) {\n\n    let direction = 0;\n\n    let single = [\n      [0, 0, 0],\n      [0, 1, 0],\n      [0, 0, 0]\n    ];\n    let straightN = [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 0, 0]\n    ];\n    let straightE = [\n      [0, 0, 0],\n      [0, 1, 1],\n      [0, 0, 0]\n    ];\n    let straightS = [\n      [0, 0, 0],\n      [0, 1, 0],\n      [0, 1, 0]\n    ];\n    let straightW = [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 0, 0]\n    ];\n    let cross = [\n      [0, 1, 0],\n      [1, 1, 1],\n      [0, 1, 0]\n    ];\n    let straightV = [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0]\n    ];\n    let straightH = [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 0]\n    ];\n    let teeN = [\n      [0, 1, 0],\n      [1, 1, 1],\n      [0, 0, 0]\n    ];\n    let teeE = [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 1, 0]\n    ];\n    let teeS = [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0]\n    ];\n    let teeW = [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 1, 0]\n    ];\n    let lN = [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 0]\n    ];\n    let lE = [\n      [0, 0, 0],\n      [0, 1, 1],\n      [0, 1, 0]\n    ];\n    let lS = [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0]\n    ];\n    let lW = [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 0, 0]\n    ];\n\n    if (this.matchArrays(straightH, chunk)) {\n      direction = 6;\n    } else if (this.matchArrays(straightV, chunk)) {\n      direction = 9;\n    } else if (this.matchArrays(straightN, chunk)) {\n      direction = 13;\n    } else if (this.matchArrays(straightE, chunk)) {\n      direction = 14;\n    } else if (this.matchArrays(straightS, chunk)) {\n      direction = 8;\n    } else if (this.matchArrays(straightW, chunk)) {\n      direction = 4;\n    } else if (this.matchArrays(cross, chunk)) {\n      direction = 3;\n      //direction = null;\n    } else if (this.matchArrays(teeN, chunk)) {\n      direction = 7;\n    } else if (this.matchArrays(teeE, chunk)) {\n      direction = 11;\n    } else if (this.matchArrays(teeS, chunk)) {\n      direction = 2;\n    } else if (this.matchArrays(teeW, chunk)) {\n      direction = 1;\n    } else if (this.matchArrays(lN, chunk)) {\n      direction = 15;\n    } else if (this.matchArrays(lE, chunk)) {\n      direction = 10;\n    } else if (this.matchArrays(lS, chunk)) {\n      direction = 0;\n    } else if (this.matchArrays(lW, chunk)) {\n      direction = 5;\n    } else if (this.matchArrays(single, chunk)) {\n      direction = 12;\n    } else {\n      //  console.log(chunk);\n    }\n    return direction;\n  }\n\n  matchArrays(a, b) {\n    for (let i = 0; i < a.length; i++) {\n      for (let j = 0; j < b.length; j++) {\n        if (a[i][j] != b[i][j]) {\n          return false\n        }\n      }\n    }\n    return true;\n  }\n\n  //Is this stuff allowed? Return true\n  //Used so we dont render stuff like dirt and pawns\n  isAllowedStuff(stuff) {\n\n    let preRegex = new RegExp('(.*)\\_')\n\n    if (preRegex.exec(stuff)) { //0.19 Change everyhing to Filth_xxx\n      if (preRegex.exec(stuff)[1] == \"Filth\")\n        return false;\n    }\n\n    switch (stuff) {\n      case \"Filth\":\n      case \"FilthDirt\":\n      case \"FilthBlood\":\n      case \"FilthAnimalFilth\":\n      case \"FilthAsh\":\n      case \"FilthCorpseBile\":\n      case \"FilthVomit\":\n      case \"FilthAmnioticFluid\":\n      case \"FilthSlime\":\n      case \"FilthBloodInsect\":\n      case \"FilthFireFoam\":\n      case \"FilthSand\":\n      case \"Blight\":\n      case \"Human\":\n      case \"PowerConduit\":\n      case \"SandbagRubble\":\n      case \"Corpse_Leather\":\n      case \"Centipede_Corpse\":\n      case \"Scyther_Corpse\":\n      case \"Corpse\":\n      case \"Frame\":\n      case \"Letter\":\n      case \"Short\":\n      case \"Blueprint\":\n      case \"Blueprint_Install\":\n      case \"RectTrigger\":\n      case \"RockRubble\":\n      case \"RubbleRock\":\n      case \"BuildingRubble\":\n      case \"SlagRubble\":\n      case \"Centipede\":\n      case \"Scyther\":\n      case \"ActiveDropPod\":\n      case \"Fire\":\n      case \"Spark\":\n        return false;\n        break;\n      default:\n        return true\n    }\n  }\n\n  isAnimal(stuff) {\n    switch (stuff) {\n      case \"Alpaca\":\n      case \"Alphabeaver\":\n      case \"FoxArctic\":\n      case \"WolfArctic\":\n      case \"Boomalope\":\n      case \"Boomrat\":\n      case \"Capybara\":\n      case \"Caribou\":\n      case \"Cassowary\":\n      case \"Cat\":\n      case \"Chicken\":\n      case \"Chinchilla\":\n      case \"Cobra\":\n      case \"Cougar\":\n      case \"Cow\":\n      case \"Deer\":\n      case \"Dromedary\":\n      case \"Elephant\":\n      case \"Elk\":\n      case \"Emu\":\n      case \"FoxFennec\":\n      case \"Gazelle\":\n      case \"GrizzlyBear\":\n      case \"Hare\":\n      case \"Husky\":\n      case \"Ibex\":\n      case \"Iguana\":\n      case \"LabradorRetriever\":\n      case \"Lynx\":\n      case \"Megascarab\":\n      case \"Megasloth\":\n      case \"Megaspider\":\n      case \"Monkey\":\n      case \"Muffalo\":\n      case \"Ostrich\":\n      case \"Panther\":\n      case \"Pig\":\n      case \"PolarBear\":\n      case \"Raccoon\":\n      case \"Rat\":\n      case \"FoxRed\":\n      case \"Rhinoceros\":\n      case \"Snowhare\":\n      case \"Spelopede\":\n      case \"Squirrel\":\n      case \"Thrumbo\":\n      case \"WolfTimber\":\n      case \"Tortoise\":\n      case \"Turkey\":\n      case \"Warg\":\n      case \"WildBoar\":\n      case \"YorkshireTerrier\":\n      case \"Grizzly\":\n      case \"Timber\":\n\n        return false;\n        break;\n      default:\n        return true;\n    }\n  }\n\n  hideStuff() {\n    this.stuffLayer.alpha = 0;\n  }\n\n  showStuff() {\n    this.stuffLayer.alpha = 1;\n  }\n\n  hideResources() {\n    this.resourceLayer.alpha = 0;\n    this.loadingFinished = true;\n  }\n\n  showResources() {\n    this.loadingFinished = false;\n    if (!this.resourceLayer) {\n      let oldCam = {\n        x: this.game.camera.x,\n        y: this.game.camera.y\n      }\n      this.game.camera.x = 0;\n      this.game.camera.y = 0;\n      setTimeout(() => {\n        this.renderResourceTileMap();\n        this.resourceLayer = this.renderBitmap(this.resourceGridLayer, true);\n        this.resourceLayer.scale.set(1 / this.zoomLevel);\n        setTimeout(() => {\n          this.game.camera.x = oldCam.x;\n          this.game.camera.y = oldCam.y;\n          this.loadingFinished = true;\n        }, 500);\n      }, 500);\n    } else {\n      this.resourceLayer.alpha = 1;\n      this.loadingFinished = true;\n    }\n  }\n  hideDeepResources() {\n    this.deepResourceLayer.alpha = 0;\n    this.loadingFinished = true;\n  }\n\n  showDeepResources() {\n    this.loadingFinished = false;\n    if (!this.deepResourceLayer) {\n      let oldCam = {\n        x: this.game.camera.x,\n        y: this.game.camera.y\n      }\n      this.game.camera.x = 0;\n      this.game.camera.y = 0;\n      setTimeout(() => {\n        this.renderDeepResourceTileMap();\n        this.deepResourceLayer = this.renderBitmap(this.deepResourceGridLayer, true);\n        this.deepResourceLayer.scale.set(1 / this.zoomLevel);\n        setTimeout(() => {\n          this.game.camera.x = oldCam.x;\n          this.game.camera.y = oldCam.y;\n          this.loadingFinished = true;\n        }, 500);\n      }, 500);\n    } else {\n      this.deepResourceLayer.alpha = 1;\n      this.loadingFinished = true;\n    }\n  }\n\n  hideMountains() {\n    this.rocksLayer.alpha = 0;\n  }\n\n  showMountains() {\n    this.rocksLayer.alpha = 1;\n  }\n\n  zoomMap(iZoom) {\n\n    this.zoomLevel = iZoom;\n\n    this.stuffLayer.scale.set(1 / this.zoomLevel);\n    //this.stuffLayer.pivot.x = this.centerMarker.x;\n    //this.stuffLayer.pivot.y = this.centerMarker.y;\n\n    if (this.rocksLayer) {\n      this.rocksLayer.scale.set(1 / this.zoomLevel);\n      //this.rocksLayer.pivot.x = this.centerMarker.x;\n      //this.rocksLayer.pivot.y = this.centerMarker.y;\n    }\n    if (this.resourceLayer) {\n      this.resourceLayer.scale.set(1 / this.zoomLevel);\n      //this.resourceLayer.pivot.x = this.centerMarker.x;\n      //this.resourceLayer.pivot.y = this.centerMarker.y;\n\n    }\n    if (this.deepResourceLayer) {\n      this.deepResourceLayer.scale.set(1 / this.zoomLevel);\n      //this.deepResourceLayer.pivot.x = this.centerMarker.x;\n      //this.deepResourceLayer.pivot.y = this.centerMarker.y;\n    }\n    this.marker.scale.setTo(1 / this.zoomLevel)\n\n\n    this.topTerrainGridLayer.position.x = this.topTerrainGridLayer.width - this.game.camera.position.x;\n    this.topTerrainGridLayer.position.y = this.topTerrainGridLayer.height - this.game.camera.position.y;\n\n    //this.topTerrainGridLayer.pivot.x = (this.centerMarker.x - this.topTerrainGridLayer.width);\n    //this.topTerrainGridLayer.pivot.y = (this.centerMarker.y - this.topTerrainGridLayer.height);\n\n    console.log(this.topTerrainGridLayer.position);\n\n    this.topTerrainGridLayer.setScale(1 / this.zoomLevel, 1 / this.zoomLevel);\n    this.topTerrainGridLayer.resize(this.game.width * this.zoomLevel, this.game.height * this.zoomLevel);\n    this.topTerrainGridLayer.resizeWorld();\n  }\n\n  delaceArray(iArray) {\n    let masterIndex = 0;\n    let outputArray = [];\n\n    //Delace array\n    for (var r = this.worldSize.x; r > 0; r--) {\n      for (var c = this.worldSize.y * 2; c > 0; c--) {\n        if (c % 2 === 0) { //Have to skip every other byte due to weird decompression error\n          // outputArray.push(iArray[masterIndex] ^ iArray[masterIndex + 1]);\n          outputArray.push(iArray[masterIndex]);\n        }\n        masterIndex++;\n      }\n    }\n    return outputArray;\n  }\n\n  //Make array 2D\n  formatArray(iArray) {\n    let masterIndex = 0;\n    let outputArray = [];\n    let row = [];\n    for (let y = 0; y < this.worldSize.y; y++) {\n      row = [];\n      for (let x = 0; x < this.worldSize.x; x++) {\n        row.push(iArray[masterIndex]);\n        masterIndex++;\n      }\n      outputArray.push(row);\n    }\n    outputArray = outputArray.reverse()\n    return outputArray;\n  }\n\n  makeCSV(iArray) {\n\n    let outputCSV = '';\n    let dataArray = this.formatArray(iArray);\n\n    for (let y = 0; y < this.worldSize.y; y++) {\n      for (let x = 0; x < this.worldSize.x; x++) {\n        //this.game.rnd.between(0, 64).toString();\n        if (dataArray[y][x] == undefined) {\n          console.log('No data @ ' + ' ' + y + ' ' + x);\n        }\n        if (dataArray[y][x] != undefined) {\n          outputCSV += dataArray[y][x];\n        }\n        if (x < (this.worldSize.x) - 1) {\n          outputCSV += ',';\n        }\n      }\n      if (y < this.worldSize.y - 1) {\n        outputCSV += \"\\n\";\n      }\n    }\n    return outputCSV;\n\n  }\n\n  //maps raw rimworld IDs to Tilemap IDs\n  mapTextures(iArray, param) {\n\n    if (param == \"terrain\") {\n      //Fix For tiles Metal, Silver, Gold and Sterile tiles\n      for (let j = 0; j < iArray.length; j++) {\n        if (iArray[j] == 101 || iArray[j] == 246 || iArray[j] == 37 || iArray[j] == 199) {\n          if (this.mapInfo.underTerrainGrid[j] != 0) {\n            //Just shift the ID up one since we only care about tiles under dirt\n            iArray[j] += 1;\n          }\n        }\n      }\n\n      for (let i = 0; i < iArray.length; i++) {\n        //TINT THE TERRAIN TILE\n        switch (iArray[i]) {\n          case 2: //Concrete\n            iArray[i] = 1;\n            break;\n          case 235: //Paved\n            iArray[i] = 2;\n            break;\n          case 70: //Wood\n            iArray[i] = 3;\n            break;\n          case 247: //metal //IF UNDER\n            iArray[i] = 4;\n            break;\n          case 38: //silver //IF UNDER\n            iArray[i] = 5;\n            break;\n          case 200: //gold  //IF UNDER\n            iArray[i] = 6;\n            break;\n          case 102: //sterile //If under\n            iArray[i] = 7;\n            break;\n          case 174: //red\n            iArray[i] = 8;\n            break;\n          case 232: //green\n            iArray[i] = 9;\n            break;\n          case 202: //blue\n            iArray[i] = 10;\n            break;\n          case 46: //cream\n            iArray[i] = 11;\n            break;\n          case 231: //dark\n            iArray[i] = 12;\n            break;\n          case 41: //burned wood\n            iArray[i] = 13;\n            break;\n          case 171: //burned carpet\n            iArray[i] = 14;\n            break;\n          case 88: //sandstone tile\n            iArray[i] = 15;\n            break;\n          case 224: //granite tile\n            iArray[i] = 16;\n            break;\n          case 160: //limestone tile\n            iArray[i] = 17;\n            break;\n          case 219: //slate tile\n            iArray[i] = 18;\n            break;\n          case 126: //Marble tile\n            iArray[i] = 19;\n            break;\n          case 173: //slate flag\n            iArray[i] = 20;\n            break;\n          case 169: //sandstone flag\n            iArray[i] = 21;\n            break;\n          case 245: //granite flag\n            iArray[i] = 22;\n            break;\n          case 59: //limestone flag\n            iArray[i] = 23;\n            break;\n          case 1: //marble flagstone\n            iArray[i] = 24;\n            break;\n          case 166: //sand\n            iArray[i] = 25;\n            break;\n          case 161: //soil\n            iArray[i] = 26;\n            break;\n          case 239: //marshy soil\n            iArray[i] = 27;\n            break;\n          case 115: // rich soil\n            iArray[i] = 28;\n            break;\n          case 48: //mud\n            iArray[i] = 29;\n            break;\n          case 6: //marsh\n            iArray[i] = 30;\n            break;\n          case 73: //gravel\n            iArray[i] = 31;\n            break;\n          case 158: //lichen covered\n            iArray[i] = 32;\n            break;\n          case 255: //ice\n            iArray[i] = 33;\n            break;\n          case 205: //broken asphalt\n            iArray[i] = 34;\n            break;\n          case 78: // packed dirt\n            iArray[i] = 35;\n            break;\n          case 37: //underwall\n            iArray[i] = 36;\n            break;\n          case 140: //deep water //DEEPOCEANWATER MISSING!!!!\n            iArray[i] = 37;\n            break;\n          case 58: //moving deep water\n            iArray[i] = 38;\n            break;\n          case 181: //shallow water\n            iArray[i] = 39;\n            break;\n          case 137: //shallow ocean\n            iArray[i] = 40;\n            break;\n          case 212: //shallow moving water\n            iArray[i] = 40;\n            break;\n          case 56: //rough sandstone\n            iArray[i] = 41;\n            break;\n          case 246: // rough hewn sandstone\n            iArray[i] = 42;\n            break;\n          case 154: //smooth sandstone\n            iArray[i] = 43;\n            break;\n          case 222: // rough granite\n            iArray[i] = 44;\n            break;\n          case 116: // rough hewn granite\n            iArray[i] = 45;\n            break;\n          case 199: //smooth granite\n            iArray[i] = 46;\n            break;\n          case 99: //rough limestone\n            iArray[i] = 47;\n            break;\n          case 82: // rought hewn limestone\n            iArray[i] = 48;\n            break;\n          case 238: //smooth limestone\n            iArray[i] = 49;\n            break;\n          case 148: //rough slate\n            iArray[i] = 50;\n            break;\n          case 101: //rough hewn slate\n            iArray[i] = 51;\n            break;\n          case 184: //smooth slate\n            iArray[i] = 52;\n            break;\n          case 57: //rough marble\n            iArray[i] = 53;\n            break;\n          case 135: //rough hewn marble\n            iArray[i] = 54;\n            break;\n          case 208: //smooth marble\n            iArray[i] = 55;\n            break;\n\n          case 21: //Moving river water?\n            iArray[i] = 38;\n            break;\n          case 71: //Bridge\n            iArray[i] = 3;\n            break;\n          default:\n            console.log(iArray[i]);\n            iArray[i] = 1000;\n        }\n        iArray[i] = iArray[i] -= 1; //fix for index offset\n      }\n    } else if (param = \"resource\") {\n      for (let i = 0; i < iArray.length; i++) {\n        switch (iArray[i]) {\n          case 138: //Limestone\n          case 84: //Granite\n          case 212: //Marble\n          case 67: //Sandstonerock\n          case 197: //Slate\n            iArray[i] = 1;\n            break;\n\n          case 17: //Plasteel\n            iArray[i] = 1;\n            break;\n\n          case 56: //compactsteel\n            iArray[i] = 1;\n            break;\n\n          case 156: //Steel\n            iArray[i] = 1;\n            break;\n\n          case 103: //Uruianum\n            iArray[i] = 1;\n            break;\n\n          case 229: //gold\n            iArray[i] = 1;\n            break;\n\n          case 194: // Sliver\n            iArray[i] = 1;\n            break;\n\n          case 127: // Jade\n            iArray[i] = 1;\n            break;\n\n          case 102: //Slate chunk\n            iArray[i] = 6;\n            break;\n          case 78: // Marble chunk\n            iArray[i] = 4;\n            break;\n          case 119: // Limestone chunk\n            iArray[i] = 3;\n            break;\n          case 252: // Granite chunk\n            iArray[i] = 2;\n            break;\n          case 47: // Sandstone chunk\n            iArray[i] = 5;\n            break;\n\n        }\n      }\n    } else if (param = \"roof\") {\n      for (let i = 0; i < iArray.length; i++) {\n        switch (iArray[i]) {\n          case 68: //Mountain\n            iArray[i] = 1;\n            break;\n          case 43: // Mountain cliff\n            iArray[i] = 2;\n            break;\n          case 13: //House\n            iArray[i] = 3;\n            break;\n          default: //dont render\n            iArray[i] = 0;\n        }\n      }\n    } else if (param = \"deepResource\") {\n      for (let i = 0; i < iArray.length; i++) {\n        switch (iArray[i]) {\n          case 68: //Steel\n            iArray[i] = 1;\n            break;\n          case 43: // Fuel\n            iArray[i] = 2;\n            break;\n          case 13: //Uruianum\n            iArray[i] = 3;\n            break;\n          default: //Silver\n            iArray[i] = 0;\n        }\n      }\n    }\n\n    return iArray;\n  }\n\n  markerInit() {\n    this.marker = this.game.add.graphics();\n    this.marker.lineStyle(2, 0xFF4444, 1);\n    this.marker.drawRect(0, 0, this.TILESIZE, this.TILESIZE);\n  }\n\n  getTileProperties() {\n\n    this.currentTile = {\n      \"terrainTile\": null,\n      \"resourceTile\": null,\n      \"deepResourceTile\": null,\n      \"stuffTile\": null, //count manage\n      \"totalHealth\": 0,\n      \"currentHealth\": 0\n    };\n\n    let x = this.topTerrainGridLayer.getTileX(this.game.input.activePointer.worldX * this.zoomLevel); // 4 * ZOOM\n    let y = this.topTerrainGridLayer.getTileY(this.game.input.activePointer.worldY * this.zoomLevel);\n    let flippedY = Math.abs(y - this.worldSize.y);\n\n    let terrainTile = this.topTerrainGridLayer.map.getTile(x, y, this.topTerrainGridLayer);\n    let stuffTile = this.mapInfo.stuffRefGrid[x][flippedY - 1];\n    let resourceTile = this.mapInfo.resourceRefGrid[(flippedY - 1) * this.worldSize.y + x];\n    let deepResourceTile = this.mapInfo.deepResourceGrid[(flippedY - 1) * this.worldSize.y + x];\n\n    if (terrainTile) {\n      this.currentTile.terrainTile = this.getTerrainName(terrainTile.index + 1) + \" - \" + (terrainTile.index + 1);\n    }\n\n\n\n    this.oldStuffTile = stuffTile;\n\n    if (stuffTile[0]) {\n      console.log(stuffTile);\n\n      //Sanitze stuffTile to removed notAllowed Items\n      for (let i = 0; i < stuffTile.length; i++) {\n        if (this.isAllowedStuff(this.getStuffName(stuffTile[i].def)) == false) {\n          let index = stuffTile.indexOf(i);\n          stuffTile.splice(index, 1);\n          this.clickIndex++;\n        }\n      }\n      this.clickDepth = stuffTile.length;\n\n      if (stuffTile != this.oldStuffTile) {\n        this.clickIndex = 0;\n      } else if (this.clickIndex < this.clickDepth - 1) {\n        this.clickIndex++;\n      } else {\n        this.clickIndex = 0;\n      }\n      if (stuffTile[this.clickIndex]) {\n        let stuffMaterial = stuffTile[this.clickIndex].stuff;\n        let stuffName = stuffTile[this.clickIndex].def;\n        let stuffHealth = stuffTile[this.clickIndex].health;\n        let stuffStack = stuffTile[this.clickIndex].stackCount;\n        this.currentTile.stuffTile = ((stuffMaterial) ? stuffMaterial + \" \" : \"\") + stuffName + ((stuffStack) ? \" x\" + stuffStack : \"\") + ((stuffHealth) ? \" (\" + stuffHealth + \" HP)\" : \"\");\n      }\n\n    }\n\n    if (resourceTile) {\n      this.currentTile.resourceTile = this.getResourceName(resourceTile) + \" - \" + resourceTile;\n    }\n    if (deepResourceTile) {\n      this.currentTile.deepResourceTile = this.getDeepResourceName(deepResourceTile) + \" x\" + this.mapInfo.deepResourceCount[(flippedY - 1) * this.worldSize.y + x] + \" - \" + deepResourceTile;\n    }\n\n  }\n\n  getTerrainName(id) {\n    let output = null;\n    switch (id) {\n      case 1: //Concrete\n        output = \"Concrete\";\n        break;\n      case 2: //Paved\n        output = \"Paved\";\n        break;\n      case 3: //Wood\n        output = \"Wood Floor\";\n        break;\n      case 4: //metal //IF UNDER\n        output = \"Metal\";\n        break;\n      case 5: //silver //IF UNDER\n        output = \"Silver\";\n        break;\n      case 6: //gold  //IF UNDER\n        output = \"Gold\";\n        break;\n      case 7: //sterile //If under\n        output = \"Sterile\";\n        break;\n      case 8: //red\n        output = \"Red Carpet\";\n        break;\n      case 9: //green\n        output = \"Green Carpet\";\n        break;\n      case 10: //blue\n        output = \"Blue Carpet\";\n        break;\n      case 11: //cream\n        output = \"Cream Carpet\";\n        break;\n      case 12: //dark\n        output = \"Dark Carpet\";\n        break;\n      case 13: //burned wood\n        output = \"Burned Wood Floor\";\n        break;\n      case 14: //burned carpet\n        output = \"Burned Carpet\";\n        break;\n      case 15: //sandstone tile\n        output = \"Sandstone Tile\";\n        break;\n      case 16: //granite tile\n        output = \"Granite Tile\";\n        break;\n      case 17: //limestone tile\n        output = \"Limestone Tile\";\n        break;\n      case 18: //slate tile\n        output = \"Slate Tile\";\n        break;\n      case 19: //Marble tile\n        output = \"Marble Tile\";\n        break;\n      case 20: //slate flag\n        output = \"Slate Flagstone\";\n        break;\n      case 21: //sandstone flag\n        output = \"Sandstone Flagstone\";\n        break;\n      case 22: //granite flag\n        output = \"Granite Flagstone\";\n        break;\n      case 23: //limestone flag\n        output = \"Limestone Flagstone\";\n        break;\n      case 24: //marble flagstone\n        output = \"Marble Flagstone\";\n        break;\n      case 25: //sand\n        output = \"Sand\";\n        break;\n      case 26: //soil\n        output = \"Soil\";\n        break;\n      case 27: //marshy soil\n        output = \"Marshy Soil\";\n        break;\n      case 28: // rich soil\n        output = \"Rich Soil\";\n        break;\n      case 29: //mud\n        output = \"Mud\";\n        break;\n      case 30: //marsh\n        output = \"Marsh\";\n        break;\n      case 31: //gravel\n        output = \"Gravel\";\n        break;\n      case 32: //lichen covered\n        output = \"Lichen Covered Dirt\";\n        break;\n      case 33: //ice\n        output = \"Ice\";\n        break;\n      case 34: //broken asphalt\n        output = \"Broken Asphalt\";\n        break;\n      case 35: // packed dirt\n        output = \"Packed Dirt\";\n        break;\n      case 36: //underwall\n        output = \"Underwall\";\n        break;\n      case 37: //deep water\n        output = \"Deep Water\";\n        break;\n      case 38: //moving deep water\n        output = \"Moving Deep Water\";\n        break;\n      case 39: //shallow water\n        output = \"Shallow Water\";\n        break;\n      case 40: //shallow ocean\n        output = \"Shallow Ocean\";\n        break;\n      case 40: //shallow moving water\n        output = \"Shallow Moving Water\";\n        break;\n      case 41: //rough sandstone\n        output = \"Rough Sandstone\";\n        break;\n      case 42: // rough hewn sandstone\n        output = \"Rough Hewn Sandstone\";\n        break;\n      case 43: //smooth sandstone\n        output = \"Smooth Sandstone\";\n        break;\n      case 44: // rough granite\n        output = \"Rough Granite\";\n        break;\n      case 45: // rough hewn granite\n        output = \"Rough Hewn Granite\";\n        break;\n      case 46: //smooth granite\n        output = \"Smooth Granite\";\n        break;\n      case 47: //rough limestone\n        output = \"Rough Limestone\";\n        break;\n      case 48: // rought hewn limestone\n        output = \"Rough Hewn Limestone\";\n        break;\n      case 49: //smooth limestone\n        output = \"Smooth Limestone\";\n        break;\n      case 50: //rough slate\n        output = \"Rough Slate\";\n        break;\n      case 51: //rough hewn slate\n        output = \"Rough Hewn Slate\";\n        break;\n      case 52: //smooth slate\n        output = \"Smooth Slate\";\n        break;\n      case 53: //rough marble\n        output = \"Rough Marble\";\n        break;\n      case 54: //rough hewn marble\n        output = \"Rough Hewn Marble\";\n        break;\n      case 55: //smooth marble\n        output = \"Smooth Marble\";\n        break;\n      default:\n        output = id + \" - no tile found\";\n    }\n    return output;\n  }\n\n  getResourceName(id) {\n    let output = null;\n    switch (id) {\n\n      case 138: //Limestone\n        output = \"Limestone\";\n        break;\n      case 84: //Granite\n        output = \"Granite\";\n        break;\n      case 212: //Marble\n        output = \"Marble\";\n        break;\n      case 67: //Sandstonerock\n        output = \"Sandstone\";\n        break;\n      case 197: //Slate\n        output = \"Slate\";\n        break;\n\n      case 17: //Plasteel\n        output = \"Plasteel\";\n        break;\n\n      case 56: //compactsteel\n        output = \"Compacted Machinery\";\n        break;\n\n      case 156: //Steel\n        output = \"Steel\";\n        break;\n\n      case 103: //Uranium\n        output = \"Uranium\";\n        break;\n\n      case 194: // Sliver\n        output = \"Sliver\";\n        break;\n\n      case 229: //Gold\n        output = \"Gold\";\n        break;\n\n      case 127: // Jade\n        output = \"Jade\";\n        break;\n\n      case 102: //Slate\n        output = \"Slate Chunk\";\n        break;\n      case 78: // Marble\n        output = \"Marble Chunk\";\n        break;\n      case 119: // Limestone\n        output = \"Limestone Chunk\";\n        break;\n      case 252: // Granite\n        output = \"Granite Chunk\";\n        break;\n      case 47: // Sandstone\n        output = \"Sandstone Chunk\";\n        break;\n      case 241: // Metal Chunk\n        output = \"Metal Chunk\";\n        break;\n\n      default:\n        output = null;\n    }\n    return output;\n  }\n\n  getDeepResourceName(id) {\n    let output = null;\n    switch (id) {\n\n      case 251: //Steel\n        output = \"Steel\";\n        break;\n      case 97: // Fuel\n        output = \"Chemfuel\";\n        break;\n      case 160: //Uruianum\n        output = \"Uruianum\";\n        break;\n      default:\n        output = null;\n    }\n    return output;\n  }\n\n  decompress(rawGrid) {\n    //TOPGRID\n    //DECODE BASE 64 TO BINARY\n    let binary = atob(rawGrid);\n    let output = [];\n    //INFLATE/DECOMPRESS TOPGRID\n    try {\n      output = pako.inflate(binary, {\n        raw: true\n      });\n    } catch (err) {\n      console.log(err);\n    }\n    return (this.delaceArray(output));\n  }\n\n  getPosition(raw) {\n    //Remove the () + comma seperate the x y z\n    let formattedSize = raw.replace(/[(-)]/g, '');\n    //Split out into an array\n    formattedSize = formattedSize.split(\",\");\n    //Loop through the array to make it all ints\n    for (let i = 0; i < formattedSize.length; i++) {\n      formattedSize[i] = parseInt(formattedSize[i]);\n    }\n    return formattedSize;\n  }\n  getColor(raw) {\n    //Remove the () + comma seperate the x y z\n    let formattedSize = raw.replace(/[RGBA(-)]/g, '');\n    //Split out into an array\n    formattedSize = formattedSize.split(\",\");\n    //Loop through the array to make it all ints\n    for (let i = 0; i < formattedSize.length; i++) {\n      let byte = Math.floor(formattedSize[i] >= 1.0 ? 255 : formattedSize[i] * 256.0)\n      formattedSize[i] = byte;\n    }\n    return formattedSize;\n  }\n}\nexport default GameState;\n",
    "class Preload extends Phaser.State {\n  preload() {\n    //  Set-up our preloader sprite\n    let preloadBg = this.add.sprite(this.game.world.centerX, this.game.world.centerY, 'preloadBg');\n    preloadBg.anchor.setTo(0.5);\n\n    this.preloadBar = this.add.sprite(this.game.world.centerX - 256, this.game.world.centerY, 'preloadBar');\n    this.load.setPreloadSprite(this.preloadBar);\n\n    this.preloadBar.anchor.setTo(0, 0.5);\n\n\n    this.game.load.image('resourceTiles', 'assets/ResourcesTilemap.png');\n    this.game.load.spritesheet('wallTiles', 'assets/WallTilemap.png', 80, 80, 16);\n    this.game.load.spritesheet('brickWallTiles', 'assets/BrickTileMap.png', 80, 80, 16);\n    this.game.load.spritesheet('woodWallTiles', 'assets/WoodTilemap.png', 80, 80, 16);\n    this.game.load.spritesheet('rockTiles', 'assets/Rock_Atlas.png', 80, 80, 16);\n\n    this.game.load.spritesheet('sandbagTiles', 'assets/Sandbags_Atlas.png', 80, 80, 16);\n\n    this.game.load.image('rockTint', 'assets/rockTint.png');\n    this.game.load.image('chunk', 'assets/RockLowA.png');\n    this.game.load.image('slag', 'assets/MetalDebrisA.png');\n\n\n    this.game.load.image('resourceTint', 'assets/resourceTint.png');\n\n    this.game.load.script('pako', 'assets/pako.min.js');\n\n  //  new AssetLoader(this.game, this.game.cache.getJSON(\"assets\"));\n\n  }\n  create() {\n    let tween = this.add.tween(this.preloadBar).to({\n      alpha: 0\n    }, 1000, Phaser.Easing.Linear.None, true);\n    tween.onComplete.add(this.startMainMenu, this);\n\n  }\n  startMainMenu() {\n    this.game.state.start('DynamicLoad');\n  }\n\n}\nexport default Preload;\n",
    "class PreloadAssets extends Phaser.State {\n\n  init(assets,json){\n    this.toLoadJson = assets;\n    this.json = json;\n  }\n\n  preload() {\n    //  Set-up our preloader sprite\n    let preloadBg = this.add.sprite(this.game.world.centerX, this.game.world.centerY, 'preloadBg');\n    preloadBg.anchor.setTo(0.5);\n\n    this.preloadBar = this.add.sprite(this.game.world.centerX - 256, this.game.world.centerY, 'preloadBar');\n    this.load.setPreloadSprite(this.preloadBar);\n\n    this.preloadBar.anchor.setTo(0, 0.5);\n\n    this.text = this.game.add.text(256, this.game.world.centerY + 64, 'Click to start load', { font: \"normal 18px Arial\", align: 'left', fill: '#ffffff'});\n\n\n\n    if(this.game.hd == false){\n      this.game.load.image('tiles', 'assets/ShiftTilemap16.bmp');\n    }else{\n      this.game.load.image('tiles', 'assets/ShiftTilemap32.bmp');\n    }\n\n   new AssetLoader(this.game, this.toLoadJson);\n\n   this.game.load.onFileComplete.add(this.fileComplete, this);\n   this.game.load.onLoadComplete.add(this.onLoadComplete, this);\n\n   this.game.time.advancedTiming = true;\n   this.game.antialias = false;\n   this.game.scale.pageAlignHorizontally = true;\n   this.game.scale.pageAlignVertically = true;\n\n\n  }\n  create() {\n\n    let tween = this.add.tween(this.preloadBar).to({\n      alpha: 0\n    }, 250, Phaser.Easing.Linear.None, true);\n    //tween.onComplete.add(this.startMainRender, this);\n\n  }\n  fileComplete(progress, cacheKey, success, totalLoaded, totalFiles) {\n\t   this.text.setText(\"Downloading assets: \" + progress + \"% - \" + totalLoaded + \" out of \" + totalFiles);\n  }\n\n  onLoadComplete() {\n    this.text.setText(\"Downloaded all assets! Start rendering...\");\n    this.game.json = this.json;\n    this.game.state.start('GameState');\n\n  }\n\n  startMainRender() {\n\n  }\n\n}\nexport default PreloadAssets;\n"
  ]
}